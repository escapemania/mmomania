#Include "Libs/Zrx/ModeLibs/Common/VirtualPickups/VirtualPickups.Script.txt" as VirtualPickups
#Include "Libs/EscapeMania/ModeLibs/EscapeMania/Items/Items.Script.txt" as Items
#Include "Libs/EscapeMania/ModeLibs/EscapeMania/Rooms/RoomsRequestRespawn.Script.txt" as RoomsRequestRespawn
#Include "Libs/EscapeMania/ModeLibs/EscapeMania/MediaTracker/MediaTracker.Script.txt" as MediaTracker

#Const C_WaterEntranceTag "Water_Entrance"
#Const C_WaterEndTag "Water_End"
#Const C_BottleLandmarkTag "Water_Item"
#Const C_MediaTrackerClip "Water"
#Const C_MediaTrackerPriority 2

declare Boolean[Text] G_InWater;
declare Boolean G_IsComplete;

Void Init() {
	G_IsComplete = False;
}

Text[] GetHints() {
	declare Text[] Hints;
	if (G_IsComplete) {
		return Hints;
	}

	Hints.add("The next puzzle you want to solve is the water tank.");
	Hints.add("Did you notice a  when you fall in the water?");
	Hints.add("There are formulas on the billboard, what could they mean?");
	Hints.add("How can you get the bottle to be closer to the surface?");
	Hints.add("Jumping in the water can raise the water level on the connected tank.");
	Hints.add("You need to have multiple people jumping in the water at the same time.");
	Hints.add("Have 3 people jump in the water and the last one take the bottle!");
	Hints.add("<END>");

	return Hints;
}

Void ResetPuzzle() {
	Init();
	// Destroy Bottle Items
	foreach (Pickup in VirtualPickups::GetAll()) {
		if (Items::IsBottleItem(Pickup)) {
			VirtualPickups::Destroy(Pickup.Id);
		}
	}
	
	foreach (PlayerLogin => InWater in G_InWater) {
		G_InWater[PlayerLogin] = False;
	}
}

Void CompletePuzzle() {
	// G_IsComplete is only set to True when one player picks up the bottle item
	
	// Destroy Bottle Items
	foreach (Pickup in VirtualPickups::GetAll()) {
		if (Items::IsBottleItem(Pickup)) {
			VirtualPickups::Destroy(Pickup.Id);
		}
	}
	
	// Create Bottle Item
	foreach (Landmark in MapLandmarks) {
		if (Landmark.Tag == C_BottleLandmarkTag) {
			Items::CreateBottleItem(Landmark);
		}
	}

	// Tell players something is happening
	UIManager.UIAll.QueueMessage(1000, 1, CUIConfig::EMessageDisplay::Big, "");
}

Void OnChange(CSmPlayer Player, Boolean GoesInside) {
	if (G_IsComplete) {
		return;
	}

	declare Integer countInWater = 0;
	foreach (PlayerLogin => InWater in G_InWater) {
		if (InWater) {
			countInWater += 1;
		}
	}

	// Delete the bottle on the landmark	
	foreach (Landmark in MapLandmarks) {
		if (Landmark.Tag == C_BottleLandmarkTag) {
			foreach (Pickup in VirtualPickups::GetByLandmark(Landmark)) {
				if (Items::IsBottleItem(Pickup)) {
					VirtualPickups::Destroy(Pickup.Id);
				}
			}
		}
	}

	if (countInWater == 3) {
		CompletePuzzle();
	} else if (GoesInside) {
		declare UI = UIManager.GetUI(Player);
		UI.QueueMessage(1000, 1, CUIConfig::EMessageDisplay::Big, "");
	}
}

Boolean CanBreath(CSmPlayer Player) {
	declare Boolean HasHelmet = False;
	declare Boolean HasPowerSource = False;
	foreach (Pickup in VirtualPickups::GetByPlayer(Player)) {
		if (Items::IsHelmetItem(Pickup)) {
			HasHelmet = True;
		}
		if (Items::IsPowerSourceItem(Pickup)) {
			HasPowerSource = True;
		}
	}
	return HasHelmet && HasPowerSource;
}

Void OnWaterEnd(CSmPlayer Player) {
	if (!CanBreath(Player) && G_InWater.get(Player.User.Login, False)) {
		RoomsRequestRespawn::RequestRespawn(Player);
		declare UI = UIManager.GetUI(Player);
		UI.QueueMessage(1000, 1, CUIConfig::EMessageDisplay::Big, "");
	}
}

Void OnRespawn(CSmPlayer Player) {
	if (G_InWater.get(Player.User.Login, False)) {
		MediaTracker::UnsetMediaTracker(Player, C_MediaTrackerPriority);
		G_InWater[Player.User.Login] = False;
		OnChange(Player, False);
	}
}

Void OnEnterWater(CSmPlayer Player) {
	if (!CanBreath(Player)) {
		MediaTracker::SetMediaTracker(Player, C_MediaTrackerClip, C_MediaTrackerPriority);
	}
	G_InWater[Player.User.Login] = True;
	OnChange(Player, True);
}

Void Loop() {
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
				if (Event.Landmark.Tag == C_WaterEntranceTag) {
					OnEnterWater(Event.Player);
				} else if (Event.Landmark.Tag == C_WaterEndTag) {
					OnWaterEnd(Event.Player);
				} else if (Event.Landmark.Tag == C_BottleLandmarkTag) {
					// Pickup
					declare VirtualPickups::K_VirtualPickup[] LandmarkPickups = VirtualPickups::GetByLandmark(Event.Landmark);
					if (LandmarkPickups.count > 0) {
						declare VirtualPickups::K_VirtualPickup Pickup = LandmarkPickups[0];
						if (Items::IsBottleItem(Pickup)) {
							VirtualPickups::SetPlayer(Pickup.Id, Event.Player);
							G_IsComplete = True;
						}
					}
				}
			}
		}
	}
}

