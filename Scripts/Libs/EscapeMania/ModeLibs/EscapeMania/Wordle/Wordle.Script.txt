#Include "Libs/Zrx/ModeLibs/Common/VirtualPickups/VirtualPickups.Script.txt" as VirtualPickups
#Include "Libs/EscapeMania/ModeLibs/EscapeMania/Items/Items.Script.txt" as Items

#Include "TextLib" as TL

#Const C_SuccessLandmarkTagPrefix "Wordle_Success_"
#Const C_SuccessLandmarkTag_1 "Wordle_Success_1"
#Const C_SuccessLandmarkTag_2 "Wordle_Success_2"
#Const C_SuccessLandmarkTag_3 "Wordle_Success_3"
#Const C_SuccessLandmarkTag_4 "Wordle_Success_4"
#Const C_ItemLandmarkTag "Wordle_Item"
#Const C_Clue1LandmarkTag "Wordle_Clue1"
#Const C_Clue2LandmarkTag "Wordle_Clue2"


declare Integer[Text] G_IsSuccess;
declare Boolean G_IsComplete;
declare Boolean G_FoundClue1;
declare Boolean G_FoundClue2;

Boolean IsComplete() {
	return G_IsComplete;
}

Text[] GetHints() {
	declare Text[] Hints;
	if (G_IsComplete) {
		return Hints;
	}

	Hints.add("The next puzzle you want to solve is the word game.");
	if (!G_FoundClue1) {
		Hints.add("You are missing a clue... Search more.");
		Hints.add("The clue is somewhere in the rocks...");
		Hints.add("The clue is in the rocks on the left of the turtle's top left's leg!");
	}
	if (!G_FoundClue2) {
		Hints.add("You are missing a clue... Search more...");
		Hints.add("The clue is somewhere next to the turtle...");
		Hints.add("The clue is under the turtle's right side!");
	}
	Hints.add("Did you ever play Wordle?");
	Hints.add("Green means that the letter is in the right place, yellow in another place, grey the letter isn't present.");
	Hints.add("There's already someone on the letter A... And you are 4...");
	Hints.add("You are looking for a 5 letter word.");
	Hints.add("?AMER");
	Hints.add("The word is GAMER, enter it by placing each player next to the appropriate letter!");
	Hints.add("<END>");

	return Hints;
}

Void ResetPuzzle() {
	G_IsSuccess.clear();
	G_IsComplete = False;

	// Destroy Key Items
	foreach (Pickup in VirtualPickups::GetAll()) {
		if (Items::IsKeyItem(Pickup)) {
			VirtualPickups::Destroy(Pickup.Id);
		}
	}
}

Void CompletePuzzle() {
	G_IsComplete = True;
	
	// Destroy Key Items
	foreach (Pickup in VirtualPickups::GetAll()) {
		if (Items::IsKeyItem(Pickup)) {
			VirtualPickups::Destroy(Pickup.Id);
		}
	}
	
	// Create Key Items
	foreach (Landmark in MapLandmarks) {
		if (Landmark.Tag == C_ItemLandmarkTag) {
			Items::CreateKeyItem(Landmark);
		}
	}
	
	// Tell players something is happening
	foreach (Player in Players) {
		declare UI = UIManager.GetUI(Player);
		UI.QueueMessage(1000, 1, CUIConfig::EMessageDisplay::Big, "");
	}
}

Void OnEnterTest(CSmPlayer Player, Text Tag) {
	if (G_IsComplete) {
		return;
	}
	
	if (Tag == C_SuccessLandmarkTag_1) {
		G_IsSuccess[Player.User.Login] = 1;
	} else if (Tag == C_SuccessLandmarkTag_2) {
		G_IsSuccess[Player.User.Login] = 2;
	} else if (Tag == C_SuccessLandmarkTag_3) {
		G_IsSuccess[Player.User.Login] = 3;
	} else if (Tag == C_SuccessLandmarkTag_4) {
		G_IsSuccess[Player.User.Login] = 4;
	}

	declare Boolean isSuccess1 = False;
	declare Boolean isSuccess2 = False;
	declare Boolean isSuccess3 = False;
	declare Boolean isSuccess4 = False;
	foreach (Player => Success in G_IsSuccess) {
		if (Success == 1) {
			isSuccess1 = True;
		} else if (Success == 2) {
			isSuccess2 = True;
		} else if (Success == 3) {
			isSuccess3 = True;
		} else if (Success == 4) {
			isSuccess4 = True;
		}
	}
	
	if (isSuccess1 && isSuccess2 && isSuccess3 && isSuccess4) {
		CompletePuzzle();
	} else {
		declare UI = UIManager.GetUI(Player);
		UI.QueueMessage(1000, 1, CUIConfig::EMessageDisplay::Big, "");
	}
}

Void OnLeaveTest(CSmPlayer Player) {
	G_IsSuccess[Player.User.Login] = 0;
}

Void OnRespawn(CSmPlayer Player) {
	OnLeaveTest(Player);
}

Void Init() {
	G_IsComplete = False;
	G_FoundClue1 = False;
	G_FoundClue2 = False;
}

Void Loop() {
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
				if (TL::StartsWith(C_SuccessLandmarkTagPrefix, Event.Landmark.Tag)) {
					OnEnterTest(Event.Player, Event.Landmark.Tag);
				} else if (Event.Landmark.Tag == C_ItemLandmarkTag) {
					// Pickup
					declare VirtualPickups::K_VirtualPickup[] LandmarkPickups = VirtualPickups::GetByLandmark(Event.Landmark);
					if (LandmarkPickups.count > 0) {
						declare VirtualPickups::K_VirtualPickup Pickup = LandmarkPickups[0];
						if (Items::IsKeyItem(Pickup)) {
							VirtualPickups::SetPlayer(Pickup.Id, Event.Player);
						}
					}
				} else if (Event.Landmark.Tag == C_Clue1LandmarkTag) {
					G_FoundClue1 = True;
				} else if (Event.Landmark.Tag == C_Clue2LandmarkTag) {
					G_FoundClue2 = True;
				} else {
					OnLeaveTest(Event.Player);
				}
			}
		}
	}
}
